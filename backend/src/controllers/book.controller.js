import Book from '../models/Book.js';
import Borrow from '../models/Borrow.js';
import fs from 'fs';
import path from 'path';

// üìö L·∫•y danh s√°ch t·∫•t c·∫£ s√°ch k√®m s·ªë l∆∞·ª£ng ƒëang ƒë∆∞·ª£c m∆∞·ª£n
export const getAllBooks = async (req, res) => {
  try {
    const books = await Book.find().sort({ createdAt: -1 });

    const activeBorrows = await Borrow.find({ status: { $ne: 'returned' } });

    const borrowedMap = new Map();
    activeBorrows.forEach((borrow) => {
      borrow.books.forEach((b) => {
        const bookId = b.book.toString();
        borrowedMap.set(bookId, (borrowedMap.get(bookId) || 0) + b.quantity);
      });
    });

    const booksWithBorrowed = books.map((book) => ({
      ...book.toObject(),
      currentlyBorrowed: borrowedMap.get(book._id.toString()) || 0,
    }));

    res.json(booksWithBorrowed);
  } catch (error) {
    console.error('‚ùå L·ªói khi l·∫•y danh s√°ch s√°ch:', error.message);
    res.status(500).json({ message: 'L·ªói khi l·∫•y danh s√°ch s√°ch' });
  }
};

// ‚ûï T·∫°o m·ªõi s√°ch
export const createBook = async (req, res) => {
  try {
    let bookCode = req.body.bookCode?.trim()?.toUpperCase();

    if (!bookCode) {
      const latestBook = await Book.findOne().sort({ createdAt: -1 });
      const lastCodeNumber = latestBook?.bookCode?.match(/\d+/)?.[0];
      const nextNumber = lastCodeNumber ? parseInt(lastCodeNumber) + 1 : 1;
      bookCode = 'BK' + String(nextNumber).padStart(3, '0');
    }

    const existing = await Book.findOne({ bookCode });
    if (existing) {
      return res.status(400).json({ message: 'M√£ s√°ch ƒë√£ t·ªìn t·∫°i' });
    }

    const newBook = new Book({
      bookCode,
      title: req.body.title?.trim(),
      author: req.body.author?.trim(),
      category: req.body.category?.trim(),
      publisher: req.body.publisher?.trim(),
      year: req.body.year ? Number(req.body.year) : undefined,
      description: req.body.description?.trim(),
      quantity: req.body.quantity ? Number(req.body.quantity) : 0,
      coverImage: req.file?.filename || null,
      createdBy: req.user?.id || null,
    });

    const saved = await newBook.save();
    res.status(201).json(saved);
  } catch (err) {
    console.error('‚ùå L·ªói khi t·∫°o s√°ch:', err.message);
    res.status(400).json({ message: 'L·ªói t·∫°o s√°ch', error: err.message });
  }
};

// üìù C·∫≠p nh·∫≠t s√°ch
export const updateBook = async (req, res) => {
  try {
    const book = await Book.findById(req.params.id);
    if (!book) return res.status(404).json({ message: 'S√°ch kh√¥ng t·ªìn t·∫°i' });

    const newQuantity = Number(req.body.quantity) || 0;

    const borrows = await Borrow.find({ 'books.book': book._id, status: { $ne: 'returned' } });
    const borrowedCount = borrows.reduce((total, borrow) => {
      const match = borrow.books.find(b => b.book.toString() === book._id.toString());
      return match ? total + match.quantity : total;
    }, 0);

    if (newQuantity < borrowedCount) {
      return res.status(400).json({
        message: `Kh√¥ng th·ªÉ gi·∫£m s·ªë l∆∞·ª£ng s√°ch xu·ªëng ${newQuantity}. Hi·ªán ƒëang c√≥ ${borrowedCount} s√°ch ƒëang ƒë∆∞·ª£c m∆∞·ª£n.`,
      });
    }

    if (req.file && book.coverImage) {
      const oldPath = path.join('uploads/covers', book.coverImage);
      if (fs.existsSync(oldPath)) fs.unlinkSync(oldPath);
    }

    const updates = {
      title: req.body.title?.trim(),
      author: req.body.author?.trim(),
      category: req.body.category?.trim(),
      publisher: req.body.publisher?.trim(),
      year: req.body.year ? Number(req.body.year) : undefined,
      description: req.body.description?.trim(),
      quantity: newQuantity,
      ...(req.file && { coverImage: req.file.filename }),
    };

    const updated = await Book.findByIdAndUpdate(req.params.id, updates, { new: true });
    res.json(updated);
  } catch (err) {
    console.error('‚ùå L·ªói c·∫≠p nh·∫≠t s√°ch:', err.message);
    res.status(400).json({ message: 'C·∫≠p nh·∫≠t s√°ch th·∫•t b·∫°i', error: err.message });
  }
};

// ‚ùå X√≥a s√°ch (k√®m ki·ªÉm tra ƒëang m∆∞·ª£n + x√≥a ·∫£nh b√¨a n·∫øu c√≥)
export const deleteBook = async (req, res) => {
  try {
    const book = await Book.findById(req.params.id);
    if (!book) {
      return res.status(404).json({ message: 'S√°ch kh√¥ng t·ªìn t·∫°i' });
    }

    // üì¶ Ki·ªÉm tra s√°ch ƒëang ƒë∆∞·ª£c m∆∞·ª£n ch∆∞a
    const isBorrowed = await Borrow.exists({
      'books.book': book._id,
      status: { $ne: 'returned' },
    });

    if (isBorrowed) {
      return res.status(400).json({ message: 'S√°ch ƒëang ƒë∆∞·ª£c m∆∞·ª£n, kh√¥ng th·ªÉ x√≥a' });
    }

    // üñºÔ∏è X√≥a ·∫£nh b√¨a n·∫øu c√≥
    if (book.coverImage) {
      try {
        const imgPath = path.resolve('uploads/covers', book.coverImage);
        if (fs.existsSync(imgPath)) {
          fs.unlinkSync(imgPath);
          console.log(`üßπ ƒê√£ x√≥a ·∫£nh b√¨a: ${book.coverImage}`);
        } else {
          console.warn('‚ö†Ô∏è File ·∫£nh kh√¥ng t·ªìn t·∫°i:', imgPath);
        }
      } catch (err) {
        console.error('‚ùå L·ªói khi x√≥a ·∫£nh b√¨a:', err.message);
      }
    }

    // üóëÔ∏è X√≥a s√°ch kh·ªèi DB
    await Book.findByIdAndDelete(book._id);
    res.json({ message: 'ƒê√£ x√≥a s√°ch v√† ·∫£nh b√¨a (n·∫øu c√≥)' });
  } catch (error) {
    console.error('‚ùå L·ªói khi x√≥a s√°ch:', error.message);
    res.status(500).json({ message: 'L·ªói khi x√≥a s√°ch', error: error.message });
  }
};

// üìä Th·ªëng k√™ s√°ch
export const getBookSummary = async (req, res) => {
  try {
    const totalTitles = await Book.countDocuments();
    const books = await Book.find();
    const totalInStock = books.reduce((sum, book) => sum + book.quantity, 0);

    const activeBorrows = await Borrow.find({ status: { $ne: 'returned' } });

    let totalBorrowedBooks = 0;
    activeBorrows.forEach((borrow) => {
      borrow.books.forEach((b) => {
        totalBorrowedBooks += b.quantity;
      });
    });

    const totalAvailableBooks = totalInStock - totalBorrowedBooks;

    res.json({
      totalTitles,
      totalInStock,
      totalBorrowedBooks,
      totalAvailableBooks,
    });
  } catch (error) {
    console.error('‚ùå L·ªói khi l·∫•y th·ªëng k√™ s√°ch:', error.message);
    res.status(500).json({ message: 'L·ªói khi l·∫•y th·ªëng k√™ s√°ch', error: error.message });
  }
};
