import Borrow from '../models/Borrow.js';
import Book from '../models/Book.js';

const MAX_EXTEND_TIMES = 1;
const EXTEND_DAYS = 15;
const DEFAULT_BORROW_DAYS = 20;
const MAX_BOOKS_PER_BORROW = 3;

// üìå T·∫°o phi·∫øu m∆∞·ª£n s√°ch
export const createBorrow = async (req, res) => {
  try {
    const { reader, books } = req.body;

    if (!reader || !books || books.length === 0) {
      return res.status(400).json({ message: 'Thi·∫øu th√¥ng tin m∆∞·ª£n s√°ch.' });
    }

    // Ki·ªÉm tra s·ªë l∆∞·ª£ng s√°ch m∆∞·ª£n v∆∞·ª£t qu√° gi·ªõi h·∫°n
    const totalBooks = books.reduce((sum, item) => sum + item.quantity, 0);
    if (totalBooks > MAX_BOOKS_PER_BORROW) {
      return res.status(400).json({ message: `Ch·ªâ ƒë∆∞·ª£c m∆∞·ª£n t·ªëi ƒëa ${MAX_BOOKS_PER_BORROW} quy·ªÉn s√°ch.` });
    }

    // Ki·ªÉm tra s·ªë l∆∞·ª£ng s√°ch t·ªìn kho
    for (const item of books) {
      const book = await Book.findById(item.book);
      if (!book) return res.status(404).json({ message: 'S√°ch kh√¥ng t·ªìn t·∫°i.' });
      if (book.quantity < item.quantity) {
        return res.status(400).json({ message: `S√°ch "${book.title}" kh√¥ng ƒë·ªß s·ªë l∆∞·ª£ng.` });
      }
      book.quantity -= item.quantity;
      await book.save();
    }

    // T√≠nh ng√†y h·∫øt h·∫°n m·∫∑c ƒë·ªãnh
    const borrowDate = new Date();
    const dueDate = new Date(borrowDate);
    dueDate.setDate(dueDate.getDate() + DEFAULT_BORROW_DAYS);

    const borrow = new Borrow({
      reader,
      books,
      borrowDate,
      dueDate,
      createdBy: req.user._id,
    });

    await borrow.save();
    res.status(201).json({ message: 'T·∫°o phi·∫øu m∆∞·ª£n th√†nh c√¥ng', data: borrow });
  } catch (err) {
    res.status(400).json({ message: 'T·∫°o phi·∫øu m∆∞·ª£n th·∫•t b·∫°i', error: err.message });
  }
};

// üìå L·∫•y danh s√°ch phi·∫øu m∆∞·ª£n
export const getAllBorrows = async (req, res) => {
  try {
    const borrows = await Borrow.find()
      .populate('reader', 'readerCode fullName email')
      .populate('books.book', 'title author')
      .sort({ createdAt: -1 });

    res.json(borrows);
  } catch (err) {
    res.status(500).json({ message: 'L·ªói khi l·∫•y danh s√°ch m∆∞·ª£n s√°ch', error: err.message });
  }
};

// üìå Tr·∫£ s√°ch
export const returnBooks = async (req, res) => {
  try {
    const { id } = req.params;

    const borrow = await Borrow.findById(id).populate('books.book');
    if (!borrow) return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y phi·∫øu m∆∞·ª£n' });

    if (borrow.status === 'returned') {
      return res.status(400).json({ message: 'Phi·∫øu m∆∞·ª£n ƒë√£ ƒë∆∞·ª£c tr·∫£ tr∆∞·ªõc ƒë√≥.' });
    }

    // C·ªông l·∫°i s·ªë l∆∞·ª£ng s√°ch v√†o kho
    for (const item of borrow.books) {
      const book = await Book.findById(item.book._id);
      book.quantity += item.quantity;
      await book.save();
    }

    borrow.returnDate = new Date();
    borrow.status = 'returned';

    await borrow.save();
    res.json({ message: 'Tr·∫£ s√°ch th√†nh c√¥ng', data: borrow });
  } catch (err) {
    res.status(400).json({ message: 'Tr·∫£ s√°ch th·∫•t b·∫°i', error: err.message });
  }
};

// üìå Gia h·∫°n m∆∞·ª£n s√°ch
export const extendBorrow = async (req, res) => {
  try {
    const { id } = req.params;

    const borrow = await Borrow.findById(id);
    if (!borrow) return res.status(404).json({ message: 'Kh√¥ng t√¨m th·∫•y phi·∫øu m∆∞·ª£n' });

    if (borrow.extendedTimes >= MAX_EXTEND_TIMES) {
      return res.status(400).json({ message: 'ƒê√£ v∆∞·ª£t qu√° s·ªë l·∫ßn gia h·∫°n cho ph√©p' });
    }

    if (borrow.status === 'returned') {
      return res.status(400).json({ message: 'Phi·∫øu ƒë√£ tr·∫£, kh√¥ng th·ªÉ gia h·∫°n' });
    }

    // ‚úÖ T√≠nh h·∫°n m·ªõi an to√†n h∆°n
    const newDueDate = new Date(borrow.dueDate.getTime() + EXTEND_DAYS * 24 * 60 * 60 * 1000);
    borrow.dueDate = newDueDate;
    borrow.extendedTimes += 1;

    await borrow.save();

    console.log('üìå Gia h·∫°n th√†nh c√¥ng:', borrow._id, '->', borrow.dueDate);

    res.json({ message: 'Gia h·∫°n th√†nh c√¥ng', data: borrow });
  } catch (err) {
    console.error('L·ªói gia h·∫°n:', err);
    res.status(400).json({ message: 'Gia h·∫°n th·∫•t b·∫°i', error: err.message });
  }
};