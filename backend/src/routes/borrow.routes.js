import express from 'express';
import {
  createBorrow,
  getAllBorrows,
  returnBooks,
  extendBorrow,
  getBorrowsByReader,
  getMyBorrows,
} from '../controllers/borrow.controller.js';
import { verifyToken, isLibrarian } from '../middlewares/auth.middleware.js';
import Borrow from '../models/Borrow.js';

const router = express.Router();

// ===============================
// üìö API Qu·∫£n l√Ω Phi·∫øu M∆∞·ª£n S√°ch
// ===============================

// ‚úÖ [GET] L·∫•y t·∫•t c·∫£ phi·∫øu m∆∞·ª£n (ch·ªâ ng∆∞·ªùi ƒëƒÉng nh·∫≠p)
router.get('/', verifyToken, getAllBorrows);

// ‚úÖ [POST] T·∫°o phi·∫øu m∆∞·ª£n m·ªõi (ch·ªâ th·ªß th∆∞)
router.post('/', verifyToken, isLibrarian, createBorrow);

// ‚úÖ [PUT] Tr·∫£ s√°ch (ch·ªâ th·ªß th∆∞)
router.put('/:id/return', verifyToken, isLibrarian, returnBooks);

// ‚úÖ [PUT] Gia h·∫°n m∆∞·ª£n s√°ch (ch·ªâ th·ªß th∆∞)
router.put('/:id/extend', verifyToken, isLibrarian, extendBorrow);

// ‚úÖ [GET] Ki·ªÉm tra s·ªë l∆∞·ª£ng s√°ch ch∆∞a tr·∫£ c·ªßa ƒë·ªôc gi·∫£
// üìå V√≠ d·ª•: /api/borrows/active/<readerId>
router.get('/active/:readerId', verifyToken, async (req, res) => {
  try {
    const { readerId } = req.params;

    const activeBorrows = await Borrow.find({
      reader: readerId,
      returned: false,
    });

    const borrowedBooksCount = activeBorrows.reduce((total, borrow) => {
      const count = borrow.books.reduce((sum, item) => sum + item.quantity, 0);
      return total + count;
    }, 0);

    res.json({ borrowedBooksCount });
  } catch (err) {
    console.error('‚ùå L·ªói ki·ªÉm tra s√°ch ch∆∞a tr·∫£:', err.message);
    res.status(500).json({ message: 'L·ªói m√°y ch·ªß' });
  }
});
  router.get('/reader/:readerId', verifyToken, getBorrowsByReader);
  // Route l·∫•y s√°ch ƒë√£ m∆∞·ª£n c·ªßa user hi·ªán t·∫°i
router.get('/my-borrows', verifyToken, getMyBorrows);

export default router;
