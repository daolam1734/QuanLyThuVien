import React, { useEffect, useState } from 'react';
import axios from 'axios';
import CreateViolationModal from './CreateViolationModal';
import toast from 'react-hot-toast';
import '../styles/ViolationManager.css';

const ViolationManager = () => {
  const [violations, setViolations] = useState([]);
  const [searchTerm, setSearchTerm] = useState('');
  const [showCreateModal, setShowCreateModal] = useState(false);

  // L·∫•y danh s√°ch vi ph·∫°m
  const fetchViolations = async () => {
    try {
      const res = await axios.get('/api/violations');
      const data = res.data?.data;
      if (Array.isArray(data)) {
        setViolations(data);
      } else {
        toast.error('Ph·∫£n h·ªìi kh√¥ng h·ª£p l·ªá t·ª´ m√°y ch·ªß');
        setViolations([]);
      }
    } catch (err) {
      toast.error('L·ªói khi t·∫£i danh s√°ch vi ph·∫°m');
    }
  };

  useEffect(() => {
    fetchViolations();
  }, []);

  // ƒê·ªïi tr·∫°ng th√°i vi ph·∫°m ƒë√£ n·ªôp
  const handleMarkAsPaid = async (violationId) => {
    try {
      await axios.put(`/api/violations/${violationId}/pay`);
      toast.success('C·∫≠p nh·∫≠t tr·∫°ng th√°i ƒë√£ n·ªôp th√†nh c√¥ng');
      // C·∫≠p nh·∫≠t l·∫°i danh s√°ch vi ph·∫°m
      fetchViolations();
    } catch {
      toast.error('L·ªói khi c·∫≠p nh·∫≠t tr·∫°ng th√°i');
    }
  };

  // L·ªçc vi ph·∫°m theo t·ª´ kh√≥a
  const filtered = violations.filter((v) =>
    v.reader?.fullName?.toLowerCase().includes(searchTerm.toLowerCase()) ||
    v.reader?.readerCode?.toLowerCase().includes(searchTerm.toLowerCase()) ||
    v.violationType?.toLowerCase().includes(searchTerm.toLowerCase())
  );

  return (
    <div className="violation-manager">
      <h2>üìí Qu·∫£n l√Ω vi ph·∫°m</h2>
      <div className="violation-header">
        <input
          type="text"
          placeholder="T√¨m ki·∫øm theo t√™n, m√£ ƒë·ªôc gi·∫£, l√Ω do..."
          value={searchTerm}
          onChange={(e) => setSearchTerm(e.target.value)}
        />
        <button onClick={() => setShowCreateModal(true)}>+ Th√™m vi ph·∫°m</button>
      </div>

      <table className="violation-table">
        <thead>
          <tr>
            <th>#</th>
            <th>M√£ vi ph·∫°m</th>
            <th>ƒê·ªôc gi·∫£</th>
            <th>M√£ ƒë·ªôc gi·∫£</th>
            <th>Lo·∫°i vi ph·∫°m</th>
            <th>Ti·ªÅn ph·∫°t</th>
            <th>Ng√†y ghi nh·∫≠n</th>
            <th>Tr·∫°ng th√°i</th>
            <th>H√†nh ƒë·ªông</th>
          </tr>
        </thead>
        <tbody>
          {filtered.length === 0 ? (
            <tr>
              <td colSpan="9">Kh√¥ng c√≥ vi ph·∫°m n√†o</td>
            </tr>
          ) : (
            filtered.map((violation, i) => (
              <tr key={violation._id}>
                <td>{i + 1}</td>
                <td>{violation.code || violation._id.slice(-6).toUpperCase()}</td>
                <td>{violation.reader?.fullName || '‚Äî'}</td>
                <td>{violation.reader?.readerCode || '‚Äî'}</td>
                <td>{violation.violationType || '‚Äî'}</td>
                <td>{violation.fineAmount?.toLocaleString('vi-VN')}ƒë</td>
                <td>{new Date(violation.createdAt).toLocaleDateString('vi-VN')}</td>
                <td>
                  <span className={`status-badge ${violation.status}`}>
                    {violation.status === 'unpaid' ? 'Ch∆∞a n·ªôp' : 'ƒê√£ n·ªôp'}
                  </span>
                </td>
                <td>
                  {violation.status === 'unpaid' && (
                    <button
                      className="btn-paid"
                      onClick={() => handleMarkAsPaid(violation._id)}
                    >
                      ƒê√°nh d·∫•u ƒë√£ n·ªôp
                    </button>
                  )}
                </td>
              </tr>
            ))
          )}
        </tbody>
      </table>

      {showCreateModal && (
        <CreateViolationModal
          onClose={() => setShowCreateModal(false)}
          onCreated={fetchViolations}
        />
      )}
    </div>
  );
};

export default ViolationManager;
